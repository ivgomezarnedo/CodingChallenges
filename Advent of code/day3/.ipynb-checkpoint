{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from functools import reduce\n",
    "from operator import mul\n",
    "\n",
    "\n",
    "SLOPES_P1 = [(3, 1)]\n",
    "\n",
    "SLOPES_P2 = [\n",
    "    (1, 1),\n",
    "    (3, 1),\n",
    "    (5, 1),\n",
    "    (7, 1),\n",
    "    (1, 2),\n",
    "]\n",
    "\n",
    "\n",
    "def read_input(fname):\n",
    "    with open(fname, \"r\") as f:\n",
    "        return [l.strip() for l in f.readlines()]\n",
    "\n",
    "\n",
    "def traverse_grid(grid, xoff, yoff):\n",
    "    if yoff >= len(grid):\n",
    "        return None\n",
    "    return grid[yoff][xoff % len(grid[0])]\n",
    "\n",
    "\n",
    "def run_traversal(grid, xoff, yoff):\n",
    "    res = '.'\n",
    "    trees = 0\n",
    "    xpos = 0\n",
    "    ypos = 0\n",
    "    while res is not None:\n",
    "        res = traverse_grid(grid, xpos + xoff, ypos + yoff)\n",
    "        if res == '#':\n",
    "            trees += 1\n",
    "        xpos += xoff\n",
    "        ypos += yoff\n",
    "    return trees\n",
    "\n",
    "\n",
    "def solve(grid, slopes):\n",
    "    return reduce(\n",
    "        mul,\n",
    "        [run_traversal(grid, xoff, yoff) for (xoff, yoff) in slopes],\n",
    "        1\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The solution to part 1 is: 244\n",
      "The solution to part 2 is: 9406609920\n"
     ]
    }
   ],
   "source": [
    "grid = read_input(\"input.txt\")\n",
    "sln1 = solve(grid, SLOPES_P1)\n",
    "print(\"The solution to part 1 is: {}\".format(sln1))\n",
    "sln2 = solve(grid, SLOPES_P2)\n",
    "print(\"The solution to part 2 is: {}\".format(sln2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "244\n"
     ]
    }
   ],
   "source": [
    "f = open('input.txt', 'r')\n",
    "lines = [line.strip('\\n') for line in f]\n",
    "\n",
    "# Part 1\n",
    "ind = 0\n",
    "num_trees = 0\n",
    "for line in lines:\n",
    "    if line[ind % (len(line))] == '#':\n",
    "        num_trees += 1\n",
    "        #print(ind % len(line), num_trees, \"\".join('O' if ind_0 == (ind % len(line)) else char for ind_0, char in enumerate(line)))\n",
    "    ind += 3\n",
    "\n",
    "print(num_trees)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "61%31"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9406609920\n"
     ]
    }
   ],
   "source": [
    "# Part 2\n",
    "slopes = {'slope1': {'right': 1, 'down': 1, 'num_trees': 0}, 'slope2': {'right': 3, 'down': 1, 'num_trees': 0},\n",
    "          'slope3': {'right': 5, 'down': 1, 'num_trees': 0}, 'slope4': {'right': 7, 'down': 1, 'num_trees': 0},\n",
    "          'slope5': {'right': 1, 'down': 2, 'num_trees': 0}}\n",
    "\n",
    "prod = 1\n",
    "for slope in slopes:\n",
    "    line_ind = 0\n",
    "    ind = 0\n",
    "    while line_ind < len(lines):\n",
    "        if lines[line_ind][ind % len(lines[line_ind])] == \"#\":\n",
    "            slopes[slope]['num_trees'] += 1\n",
    "        #print(ind % len(lines[line_ind]), slopes[slope]['num_trees'],\n",
    "        #      \"\".join('O' if ind_0 == (ind % len(lines[line_ind])) else char for ind_0, char in enumerate(lines[line_ind])))\n",
    "        line_ind += slopes[slope]['down']\n",
    "        ind += slopes[slope]['right']\n",
    "\n",
    "    prod *= slopes[slope]['num_trees']\n",
    "\n",
    "print(prod)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
